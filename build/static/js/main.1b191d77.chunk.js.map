{"version":3,"sources":["utils.js","sorting-algorithms/heapSort.js","sorting-algorithms/mergeSort.js","sorting-algorithms/quickSort.js","sorting-algorithms/selectionSort.js","Components/Visualizer.js","App.js","reportWebVitals.js","index.js"],"names":["swap","array","i","j","length","temp","console","log","deepCopyArray","newArray","value","push","sleep","milliseconds","Promise","resolve","setTimeout","colorNodes","selector","color","document","querySelectorAll","forEach","node","style","backgroundColor","colorBars","newFrame","values","animations","newAnimationsArray","elements","size","finals","animArray","element","index","type","finalElement","TYPE","siftDown","heapSize","history","leftChildIndex","leftChild","rightChildIndex","rightChild","max","maxIndex","mergeSort_recursive","left","right","mid","Math","floor","l","r","A","B","k","animatedElements","merge","newFinal","quickSort_recursive","first","median","last","swapping_index","randomizePivot","indeces","pivot","m1","m2","partition","colors","algorithms","mergesort","Array","isArray","heapsort","buildMaxHeap","heap_size","quicksort","selectionsort","minIndex","Visualizer","props","componentDidMount","resetArray","callback","min","newArraySize","state","arraySize","ceil","random","setState","usedSortingAlgorithm","setDisableProperty","nodes","setAttribute","sort","algorithm","trim","toLowerCase","showSorting","alert","a","frame","handleSizeChange","event","currentArraySize","target","name","render","Header","id","className","onClick","htmlFor","VisualizerContainer","arrayBars","map","height","sortingInfo","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"qRACO,SAASA,EAAKC,EAAOC,EAAGC,GAC3B,GAAID,GAAK,GAAKC,GAAK,GAAKD,EAAID,EAAMG,QAAUD,EAAIF,EAAMG,OAAO,CACzD,IAAIC,EAAOJ,EAAMC,GACjBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKE,OACRC,QAAQC,IAAI,0CAShB,SAASC,EAAcP,GAC1B,IADiC,EAC7BQ,EAAW,GADkB,cAEbR,GAFa,IAEjC,gCAAWS,EAAX,QACID,EAASE,KAAKD,IAHe,8BAIjC,OAAOD,EAGJ,SAASG,EAAMC,GAClB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAI/C,SAASI,EAAWC,EAAUC,GACjCC,SAASC,iBAAiBH,GACzBI,SAAQ,SAACC,GAAD,OAAUA,EAAKC,MAAMC,gBAAkBN,KAG7C,SAASO,EAAUzB,GACtB,IAAK,IAAIC,EAAE,EAAGA,EAAGD,EAAMG,OAAQF,IAC3Be,EAAW,cAAD,OAAef,GAAKD,EAAMC,IAGrC,SAASyB,EAASC,EAAQC,GAM7B,MALe,CACXD,OAAQpB,EAAcoB,GACtBC,WAAYA,GAMb,SAASC,EAAmBC,EAAUC,EAAMC,GAE/C,IADA,IAAIC,EAAY,GACRhC,EAAE,EAAGA,EAAG8B,EAAM9B,IAClBgC,EAAUvB,KAAK,MAHoC,oBAKlCoB,GALkC,IAKvD,IAAI,EAAJ,0BAAUI,EAAV,QACID,EAAUC,EAAQC,OAASD,EAAQE,MANgB,kDAQ7BJ,GAR6B,IAQvD,IAAI,EAAJ,0BAAUK,EAAV,QACIJ,EAAUI,EAAaF,OAASE,EAAaD,MATM,8BAWvD,OAAOH,ECvDX,IAAMK,EACO,QADPA,EAEM,QAFNA,EAKK,2BAyCX,SAASC,EAASvC,EAAOwC,EAAUvC,EAAGwC,EAAST,GAC3C,IAUIJ,EAVAc,EAAmB,EAAFzC,EAAM,EACvB0C,EAAY3C,EAAM0C,GAElBE,EAAoB,EAAF3C,EAAM,EACxB4C,EAAa7C,EAAM4C,GAEnBE,EAAM9C,EAAMC,GACZ8C,EAAW9C,EAKXyC,EAAiBF,GAAYxC,EAAM0C,GAAkBI,IAErDlB,EAAaC,EADM,CAAC,CAACM,MAAOO,EAAgBN,KAAME,GAAe,CAACH,MAAOY,EAAUX,KAAME,IACvCtC,EAAMG,OAAQ6B,GAChES,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAE7BkB,EAAMH,EACNI,EAAWL,GAGXE,EAAkBJ,GAAYxC,EAAM4C,GAAmBE,IAEvDlB,EAAaC,EADM,CAAC,CAACM,MAAOS,EAAiBR,KAAME,GAAe,CAACH,MAAOY,EAAUX,KAAME,IACxCtC,EAAMG,OAAQ6B,GAChES,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAE7BkB,EAAMD,EACNE,EAAWH,GAGXG,IAAa9C,IACbF,EAAKC,EAAOC,EAAG8C,GAEfnB,EAAaC,EAAmB,GAAI7B,EAAMG,OAAQ6B,GAClDS,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAE7BW,EAASvC,EAAOwC,EAAUO,EAAUN,EAAST,ICnFrD,IAAMM,EACO,QADPA,EAEM,QAFNA,EAGQ,aAHRA,EAKK,2BALLA,EAMQ,2BAWd,SAASU,EAAoBhD,EAAOiD,EAAMC,EAAOT,EAAST,GACtD,GAAIiB,EAAOC,EAAM,CACb,IAAIC,EAAMC,KAAKC,OAAOJ,EAAOC,GAAS,GAEtCF,EAAoBhD,EAAOiD,EAAME,EAAKV,EAAST,GAC/CgB,EAAoBhD,EAAOmD,EAAM,EAAGD,EAAOT,EAAST,GAe5D,SAAehC,EAAOsD,EAAGH,EAAKI,EAAGd,EAAST,GAItC,IAHA,IAAIwB,EAAI,GACJC,EAAI,GAEExD,EAAEqD,EAAGrD,GAAKkD,EAAKlD,IACrBuD,EAAE9C,KAAKV,EAAMC,IAEjB,IAAM,IAAIC,EAAEiD,EAAI,EAAGjD,GAAKqD,EAAGrD,IACvBuD,EAAE/C,KAAKV,EAAME,IAEjB,IAEIwD,EAEAC,EAAsB/B,EAJtB3B,EAAI,EACJC,EAAI,EAKR,IAAMwD,EAAEJ,EAAGrD,EAAIuD,EAAErD,QAAUD,EAAIuD,EAAEtD,OAAQuD,IAErC9B,EAAaC,EADb8B,EAAmB,CAAC,CAACxB,MAAOlC,EAAGmC,KAAME,GAAe,CAACH,MAAOjC,EAAGkC,KAAME,IACnBtC,EAAMG,OAAQ6B,GAChES,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAEzB4B,EAAEvD,IAAMwD,EAAEvD,IACVyD,EAAmB,CAAC,CAACxB,MAAOlC,EAAGmC,KAAME,GAAgB,CAACH,MAAOjC,EAAGkC,KAAME,IACtEtC,EAAM0D,GAAKF,EAAEvD,GACbA,MAEA0D,EAAmB,CAAC,CAACxB,MAAOlC,EAAGmC,KAAME,GAAe,CAACH,MAAOjC,EAAGkC,KAAME,IACrEtC,EAAM0D,GAAKD,EAAEvD,GACbA,KAGJ0B,EAAaC,EAAmB8B,EAAkB3D,EAAMG,OAAQ6B,GAChES,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAKjC,KAAO8B,GAAKH,GAAKtD,EAAIuD,EAAErD,QACnBH,EAAM0D,GAAKF,EAAEvD,GAGb2B,EAAaC,EADb8B,EAAmB,CAAC,CAACxB,MAAOuB,EAAGtB,KAAME,IACatC,EAAMG,OAAQ6B,GAChES,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAE7B3B,IACAyD,IAIJ,KAAOA,GAAKH,GAAKrD,EAAIuD,EAAEtD,QACnBH,EAAM0D,GAAKD,EAAEvD,GAGb0B,EAAaC,EADb8B,EAAmB,CAAC,CAACxB,MAAOuB,EAAGtB,KAAME,IACatC,EAAMG,OAAQ6B,GAChES,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAE7B1B,IACAwD,IAtEAE,CAAM5D,EAAOiD,EAAME,EAAKD,EAAOT,EAAST,QACrC,GAAIiB,IAASC,EAAM,CACtB,IAAIW,EAAW,CACX1B,MAAOc,EACPb,KAAME,GAEVN,EAAOtB,KAAKmD,GACZ,IAAIjC,EAAaC,EAAmB,GAAI7B,EAAMG,OAAQ6B,GACtDS,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,KChCrC,IAAMU,EACO,QADPA,EAIG,QAJHA,EAKK,2BALLA,EAMK,UAaX,SAASwB,EAAoB9D,EAAOiD,EAAMC,EAAOT,EAAST,GACtD,GAAKiB,EAAOC,EAAQ,EAyExB,SAAwBlD,EAAOiD,EAAMC,EAAOT,EAAST,GACjD,IAAImB,EAAMC,KAAKC,OAAOJ,EAAOC,GAAS,GAElCa,EAAQ/D,EAAMiD,GACde,EAAShE,EAAMmD,GACfc,EAAOjE,EAAMkD,GAEbgB,EAAiBf,EAEhBY,EAAQC,GAAUD,EAAQE,GAAUF,EAAQC,GAAUD,EAAQE,EAC/DC,EAAiBjB,EACXgB,EAAOD,GAAUC,EAAOF,GAAWE,EAAOD,GAAUC,EAAOF,EACjEG,EAAiBhB,EACXc,EAASD,GAASC,EAASC,GAAUD,EAASD,GAASC,EAASC,EACtEC,EAAiBf,EACZa,IAAWD,EAChBG,EAAiBhB,EACZc,IAAWC,IAChBC,EAAiBjB,GAErB,IACIrB,EAAaC,EADM,CAAC,CAACM,MAAOc,EAAMb,KAAME,GAAe,CAACH,MAAOgB,EAAKf,KAAME,GAAe,CAACH,MAAOe,EAAOd,KAAME,IAC5DtC,EAAMG,OAAQ6B,GACpES,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAE7B7B,EAAKC,EAAOkE,EAAgBhB,GAC5BT,EAAQ/B,KAAKgB,EAAS1B,EAAO6B,EAAmB,CAAC,CAACM,MAAOe,EAAOd,KAAME,IAAYtC,EAAMG,OAAQ6B,KAjG5FmC,CAAenE,EAAOiD,EAAMC,EAAOT,EAAST,GAE5C,IAAIoC,EAiBZ,SAAmBpE,EAAOiD,EAAMC,EAAOT,EAAST,GAC5C,IAAIqC,EAAQrE,EAAMkD,GAGdtB,EAAaC,EAAmB,CAAC,CAACM,MAAOe,EAAOd,KAAME,IAActC,EAAMG,OAAQ6B,GACtFS,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAE7B,IAAI3B,EAAIgD,EACJS,EAAIR,EACJhD,EAAI+C,EAER,KAAO/C,GAAKwD,GAER9B,EAAaC,EAAmB,CAAC,CAACM,MAAOjC,EAAGkC,KAAME,IAAgBtC,EAAMG,OAAQ6B,GAChFS,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAEzB5B,EAAME,GAAKmE,GACXtE,EAAKC,EAAOC,EAAGC,GACfD,IACAC,KACOF,EAAME,GAAKmE,GAClBtE,EAAKC,EAAOE,EAAGwD,GACfA,KAEAxD,IAIJ0B,EAAaC,EAAmB,GAAG7B,EAAMG,OAAQ6B,GACjDS,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAIjC,IAAK,IAAIO,EAAMlC,EAAGkC,GAASuB,EAAGvB,IAAQ,CAClC,IAAI0B,EAAW,CACX1B,MAAOA,EACPC,KAAME,GAEVN,EAAOtB,KAAKmD,GAYhB,OARAjC,EAAaC,EAAmB,GAAG7B,EAAMG,OAAQ6B,GACjDS,EAAQ/B,KAAKgB,EAAS1B,EAAM4B,IAEd,CACV0C,GAAIrE,EAAE,EACNsE,GAAIb,EAAE,GAhEQc,CAAUxE,EAAOiD,EAAMC,EAAOT,EAAST,GACjDsC,EAAKF,EAAQE,GACbC,EAAKH,EAAQG,GAEjBT,EAAoB9D,EAAOiD,EAAMqB,EAAI7B,EAAST,GAC9C8B,EAAoB9D,EAAOuE,EAAIrB,EAAOT,EAAST,QAC5C,GAAIiB,IAASC,EAAM,CACtB,IAAIW,EAAW,CACX1B,MAAOc,EACPb,KAAME,GAEVN,EAAOtB,KAAKmD,GACZ,IAAIjC,EAAaC,EAAmB,GAAG7B,EAAMG,OAAQ6B,GACrDS,EAAQ/B,KAAKgB,EAAS1B,EAAM4B,KCpCpC,IAAMU,EAEM,QAFNA,EAIG,UAJHA,EAKK,2B,WCKLmC,EACY,2BAMZC,EAAa,CACfC,UHTG,SAAmB3E,GACtB,IAAIyC,EAAU,GAId,OAFImC,MAAMC,QAAQ7E,IACdgD,EAAoBhD,EAAO,EAAGA,EAAMG,OAAO,EAAGsC,EAFrC,IAGNA,GGKPqC,SJXG,SAAkB9E,GACrB,IAAIyC,EAAU,GACVT,EAAS,IA6BjB,SAAsBhC,EAAOyC,EAAST,GAGlC,IAFA,IAAIQ,EAAWxC,EAAMG,OAEZF,EADOmD,KAAKC,OAAOrD,EAAMG,OAAS,GAAG,GACxBF,GAAG,EAAGA,IACxBsC,EAASvC,EAAOwC,EAAUvC,EAAGwC,EAAST,GA/B1C+C,CAAa/E,EAAOyC,EAAST,GAG7B,IAFA,IAAIgD,EAAYhF,EAAMG,OAEbF,EAAI,EAAGA,EAAID,EAAMG,OAAO,EAAGF,IAAK,CACrC,IACI2B,EAAaC,EADM,CAAC,CAACM,MAAO,EAAGC,KAAME,IACatC,EAAMG,OAAQ6B,GACpES,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAE7B7B,EAAKC,EAAO,EAAGgF,EAAY,GAE3B,IAAInB,EAAW,CACX1B,MAAO6C,EAAY,EACnB5C,KAAME,GAGVN,EAAOtB,KAAKmD,GAEZjC,EAAaC,EAAmB,GAAI7B,EAAMG,OAAQ6B,GAClDS,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAG7BW,EAASvC,IADTgF,EAC2B,EAAGvC,EAAST,GAG3C,OAAOS,GIhBPwC,UFXG,SAAmBjF,GACtB,IAAIyC,EAAU,GAMd,OAHImC,MAAMC,QAAQ7E,IACd8D,EAAoB9D,EAAO,EAAGA,EAAMG,OAAO,EAAGsC,EAHrC,IAKNA,GEKPyC,cDZJ,SAAuBlF,GAKnB,IAJA,IACI4B,EADAa,EAAU,GAEVT,EAAS,GAEJ/B,EAAE,EAAGA,EAAID,EAAMG,OAAQF,IAAI,CAGhC,IAFA,IAAIkF,EAAWlF,EAENC,EAAED,EAAGC,EAAIF,EAAMG,OAAQD,IAC5B0B,EAAaC,EAAmB,CAAC,CAACM,MAAOgD,EAAU/C,KAAME,GAAW,CAACH,MAAOjC,EAAGkC,KAAME,IAAetC,EAAMG,OAAQ6B,GAClHS,EAAQ/B,KAAKgB,EAAS1B,EAAM4B,IAExB5B,EAAME,GAAKF,EAAMmF,KACjBA,EAAWjF,GAGf0B,EAAaC,EAAmB,CAAC,CAACM,MAAOgD,EAAU/C,KAAME,IAAYtC,EAAMG,OAAQ6B,GACnFS,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAGjC7B,EAAKC,EAAOC,EAAGkF,GAEf,IAAItB,EAAW,CACX1B,MAAOlC,EACPmC,KAAME,GAGVN,EAAOtB,KAAKmD,GACZjC,EAAaC,EAAmB,CAAC,CAACM,MAAOlC,EAAGmC,KAAME,IAActC,EAAMG,OAAQ6B,GAC9ES,EAAQ/B,KAAKgB,EAAS1B,EAAO4B,IAGjC,OAAOa,IC4HI2C,E,kDA3IX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,kBAAoB,WAChB,EAAKC,cAVU,EAcnBA,WAAa,SAACC,GAGV,IAFA,ILlCyBC,EAAK3C,EKkC1B4C,EAAe,EAAKC,MAAMC,UAC1BpF,EAAW,GACNP,EAAE,EAAGA,EAAIyF,EAAczF,IAAK,CACjC,IAAIQ,GLrCiBgF,EKqCQ,ELrCH3C,EKqCM,ILpCxC2C,EAAMrC,KAAKyC,KAAKJ,GAChB3C,EAAMM,KAAKC,MAAMP,GACVM,KAAKC,MAAMD,KAAK0C,UAAYhD,EAAM,EAAI2C,GAAOA,IKmC5CjF,EAASE,KAAKD,GAGd+E,EACA,EAAKO,SAAS,CAAC/F,MAAOQ,EAAUoF,UAAWpF,EAASL,OAAQ6F,qBAAsB,MAAOR,GACxF,EAAKO,SAAS,CAAC/F,MAAOQ,EAAUoF,UAAWpF,EAASL,OAAQ6F,qBAAsB,QAxBxE,EA2BnBC,mBAAqB,SAAChF,GAClB,IAD+B,EAC3BiF,EAAQ/E,SAASC,iBAAiBH,GADP,cAEZiF,GAFY,IAE/B,oCACSC,aAAa,YAAY,IAHH,gCA3BhB,EAkCnBC,KAAO,SAACC,GACJ,EAAKN,SAAS,CAACC,qBAAsB,OAAO,kBAAM,EAAKC,mBAAmB,gDAE1EI,EAAYA,EAAUC,OAAOC,cAE7B,IAAIvG,EAAQO,EAAc,EAAKoF,MAAM3F,OAErC,GAAIqG,KAAa3B,EAAW,CACxB,IAAIjC,EAAUiC,EAAW2B,GAAWrG,GACpC,EAAKwG,YAAY/D,EAAS4D,QACvBI,MAAM,2BAAD,OAA4BJ,EAA5B,wBA5CG,EAgDnBG,YAhDmB,uCAgDL,WAAO/D,EAAS4D,GAAhB,mBAAAK,EAAA,oEACUjE,GADV,aAAAiE,EAAA,kCAAAA,EAAA,6DACCC,EADD,iBAEAhG,EAvEK,IAuEgB,EAAKgF,MAAMC,WAFhC,OAGN,EAAKG,SAAS,CAAC/F,MAAO2G,EAAMhF,SAAS,WAAOF,EAAUkF,EAAM/E,YAAa,EAAKqE,mBAAmB,aAH3F,yQAOV,EAAKF,SAAS,CAACC,qBAAsBK,IAAY,kBAAMrF,EAAW,aAAcyD,MAPtE,gEAhDK,0DA0DnBmC,iBAAmB,SAACC,GAChB,IACInB,EADAoB,EAAmB,EAAKnB,MAAMC,UAIR,iBAAtBiB,EAAME,OAAOC,KACbtB,EAAetC,KAAKN,IAnFT,EAmF6BgE,EAlF7B,IAmFgB,gBAAtBD,EAAME,OAAOC,OAClBtB,EAAetC,KAAKqC,IAtFT,IAsF6BqB,EApF7B,KAFA,MAwFXpB,EACA,EAAKK,SAAS,CAACH,UAAWF,IAAe,WACrC,EAAKH,YAAW,kBAAM,EAAKU,mBAAmB,iCAzFvC,IA4FJP,EACP,EAAKK,SAAS,CAACH,UAAWF,IAAe,WACrC,EAAKH,YAAW,kBAAM,EAAKU,mBAAmB,kCAG/C,EAAKF,SAAS,CAACH,UAAWF,IAAe,kBAAM,EAAKH,iBA9E5C,EAkFnB0B,OAAS,WACL,IAAIC,EAAS,WACT,OAAQ,qCACJ,oBAAIC,GAAG,WAAP,kCAEA,sBAAKA,GAAG,UAAR,UACA,sBAAKA,GAAG,yBAAR,UACA,wBAAQC,UAAU,4BAA+BC,QAAS,kBAAM,EAAKjB,KAAK,kBAA1E,6BACA,wBAAQgB,UAAU,4BAA+BC,QAAS,kBAAM,EAAKjB,KAAK,cAA1E,yBACA,wBAAQgB,UAAU,4BAA+BC,QAAS,kBAAM,EAAKjB,KAAK,cAA1E,yBACA,wBAAQgB,UAAU,4BAA+BC,QAAS,kBAAM,EAAKjB,KAAK,aAA1E,2BAGA,sBAAKe,GAAG,0BAAR,UACA,sBAAKA,GAAG,yBAAR,UACA,wBAAQC,UAAU,8CAA8CJ,KAAK,eAAeK,QAAS,EAAKT,iBAAlG,iBACA,uBAAOU,QAAQ,aAAaH,GAAG,aAA/B,wBACA,wBAAQC,UAAU,6CAA6CJ,KAAK,cAAcK,QAAS,EAAKT,iBAAhG,oBAEA,wBAAQQ,UAAU,6BAA+BC,QAAS,kBAAM,EAAK9B,cAArE,4CAOJgC,EAAsB,WACtB,IAAIC,EAAY,EAAK7B,MAAM3F,MAAMyH,KAAI,SAAChH,EAAO0B,GACzC,OACI,qBAAKiF,UAAU,YAAYD,GAAE,oBAAehF,GAC5CZ,MAAO,CAACmG,OAAO,GAAD,OAAU,EAANjH,EAAJ,QAD4C0B,MAM9DwF,EAAkD,MAAnC,EAAKhC,MAAMK,qBAAZ,0BAAgE,EAAKL,MAAMK,qBAA3E,eAA+G,GAEjI,OACI,qCACA,sBAAKmB,GAAG,eAAR,cAAyBQ,EAAzB,OACA,qBAAKR,GAAG,uBAAR,SACCK,QAOT,OACI,qCACA,cAACN,EAAD,IACA,cAACK,EAAD,QAnIJ,EAAK5B,MAAQ,CACT3F,MAAO,GACP4F,UAAW,GACXI,qBAAsB,MALX,E,UADE4B,IAAMC,WChBhBC,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCMSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASvB,OACP,cAAC,IAAMwB,WAAP,UACE,cAAC,EAAD,MAEFtH,SAASuH,eAAe,SAM1BX,M","file":"static/js/main.1b191d77.chunk.js","sourcesContent":["\r\nexport function swap(array, i, j){\r\n    if (i >= 0 && j >= 0 && i < array.length && j < array.length){\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    } else console.log('\\nCannot swap, indeces out of range.\\n');\r\n}\r\n\r\nexport function getRandomInteger(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max + 1 - min) + min);\r\n}\r\n\r\nexport function deepCopyArray(array) {\r\n    let newArray = [];\r\n    for (const value of array)\r\n        newArray.push(value);\r\n    return newArray;\r\n}\r\n\r\nexport function sleep(milliseconds) {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\r\n}\r\n\r\n// Animations functions \r\nexport function colorNodes(selector, color){\r\n    document.querySelectorAll(selector)\r\n    .forEach((node) => node.style.backgroundColor = color);\r\n}\r\n\r\nexport function colorBars(array) {  // array[i] tells the color if the ith bar\r\n    for (let i=0; i< array.length; i++)\r\n        colorNodes(`#array-bar-${i}`, array[i]);\r\n}\r\n\r\nexport function newFrame(values, animations) {\r\n    let newFrame = {\r\n        values: deepCopyArray(values),\r\n        animations: animations\r\n    };\r\n\r\n    return newFrame;\r\n}\r\n\r\nexport function newAnimationsArray(elements, size, finals) {\r\n    let animArray = [];\r\n    for(let i=0; i< size; i++)\r\n        animArray.push(null);\r\n\r\n    for(const element of elements)\r\n        animArray[element.index] = element.type;\r\n\r\n    for(const finalElement of finals)\r\n        animArray[finalElement.index] = finalElement.type;\r\n\r\n    return animArray;\r\n}\r\n","import { swap, newFrame, newAnimationsArray } from '../utils';\r\n\r\nconst TYPE = {\r\n    CHECKED: 'brown',\r\n    TARGET: 'brown',\r\n    SELECTED: 'darkyellow',\r\n    AVG: 'brown',\r\n    FINAL: 'rgba(28, 129, 21, 0.678)'\r\n};\r\n\r\nexport function heapSort(array) {\r\n    let history = [];\r\n    let finals = [];\r\n\r\n    buildMaxHeap(array, history, finals);\r\n    let heap_size = array.length;\r\n\r\n    for (let i = 0; i < array.length-1; i++ ){\r\n        let animatedElements = [{index: 0, type: TYPE.CHECKED}];\r\n        let animations = newAnimationsArray(animatedElements, array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n\r\n        swap(array, 0, heap_size - 1);\r\n\r\n        let newFinal = {\r\n            index: heap_size - 1,\r\n            type: TYPE.FINAL\r\n        };\r\n\r\n        finals.push(newFinal);\r\n\r\n        animations = newAnimationsArray([], array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n\r\n        heap_size--;\r\n        siftDown(array, heap_size, 0, history, finals);\r\n    }\r\n\r\n    return history;\r\n}\r\n\r\nfunction buildMaxHeap(array, history, finals) {\r\n    let heapSize = array.length;\r\n    let fromIndex = Math.floor((array.length - 1)/2); // last non-leaf node\r\n    for (let i=fromIndex; i>=0; i--) \r\n        siftDown(array, heapSize, i, history, finals);\r\n}\r\n\r\nfunction siftDown(array, heapSize, i, history, finals) {\r\n    let leftChildIndex = i*2 + 1;\r\n    let leftChild = array[leftChildIndex];\r\n\r\n    let rightChildIndex = i*2 + 2;\r\n    let rightChild = array[rightChildIndex];\r\n\r\n    let max = array[i];\r\n    let maxIndex = i;\r\n\r\n    let animatedElements;\r\n    let animations;\r\n\r\n    if (leftChildIndex < heapSize && array[leftChildIndex] > max) {\r\n        animatedElements = [{index: leftChildIndex, type: TYPE.CHECKED}, {index: maxIndex, type: TYPE.TARGET}];\r\n        animations = newAnimationsArray(animatedElements, array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n\r\n        max = leftChild;\r\n        maxIndex = leftChildIndex;\r\n    } \r\n\r\n    if (rightChildIndex < heapSize && array[rightChildIndex] > max) {\r\n        animatedElements = [{index: rightChildIndex, type: TYPE.CHECKED}, {index: maxIndex, type: TYPE.TARGET}];\r\n        animations = newAnimationsArray(animatedElements, array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n\r\n        max = rightChild;\r\n        maxIndex = rightChildIndex;\r\n    }\r\n\r\n    if (maxIndex !== i) {\r\n        swap(array, i, maxIndex);\r\n\r\n        animations = newAnimationsArray([], array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n\r\n        siftDown(array, heapSize, maxIndex, history, finals);\r\n    }\r\n}\r\n","import { newFrame, newAnimationsArray } from '../utils';\r\n\r\nconst TYPE = {\r\n    CHECKED: 'brown',\r\n    TARGET: 'brown',\r\n    SELECTED: 'darkyellow',\r\n    AVG: 'brown',\r\n    FINAL: 'rgba(28, 129, 21, 0.678)',\r\n    P_SORTED: 'rgba(28, 129, 21, 0.678)' // partially sorted\r\n};\r\n\r\nexport function mergeSort(array) {\r\n    let history = [];\r\n    let finals = [];\r\n    if (Array.isArray(array))\r\n        mergeSort_recursive(array, 0, array.length-1, history, finals);\r\n    return history;\r\n}\r\n\r\nfunction mergeSort_recursive(array, left, right, history, finals) {\r\n    if (left < right){\r\n        let mid = Math.floor((left + right) / 2);\r\n\r\n        mergeSort_recursive(array, left, mid, history, finals);\r\n        mergeSort_recursive(array, mid + 1, right, history, finals);\r\n\r\n        merge(array, left, mid, right, history, finals);\r\n    } else if (left === right){\r\n        let newFinal = {\r\n            index: left,\r\n            type: TYPE.FINAL\r\n        };\r\n        finals.push(newFinal);\r\n        let animations = newAnimationsArray([], array.length, finals);\r\n        history.push(newFrame(array, animations));    \r\n    }\r\n}\r\n\r\n\r\nfunction merge(array, l, mid, r, history, finals) {\r\n    let A = [];\r\n    let B = [];\r\n\r\n    for ( let i=l; i <= mid; i++ )\r\n        A.push(array[i]);\r\n\r\n    for ( let j=mid+1; j <= r; j++ )\r\n        B.push(array[j]);\r\n\r\n    let i = 0;     // i points to the first element of the left side array\r\n    let j = 0;     // j points to the first element of the right side array\r\n    let k;\r\n\r\n    let animatedElements; let animations;\r\n\r\n    for ( k=l; i < A.length && j < B.length; k++ ) {\r\n        animatedElements = [{index: i, type: TYPE.CHECKED}, {index: j, type: TYPE.TARGET}];\r\n        animations = newAnimationsArray(animatedElements, array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n\r\n        if (A[i] <= B[j]){\r\n            animatedElements = [{index: i, type: TYPE.SELECTED}, {index: j, type: TYPE.TARGET}];\r\n            array[k] = A[i];\r\n            i++;\r\n        } else {\r\n            animatedElements = [{index: i, type: TYPE.CHECKED}, {index: j, type: TYPE.SELECTED}];\r\n            array[k] = B[j];\r\n            j++;\r\n        }\r\n\r\n        animations = newAnimationsArray(animatedElements, array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n\r\n    }\r\n\r\n    // writing the remaining elements if the two arrays have different size\r\n    while (k <= r && i < A.length) {\r\n        array[k] = A[i];\r\n\r\n        animatedElements = [{index: k, type: TYPE.P_SORTED}];\r\n        animations = newAnimationsArray(animatedElements, array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n\r\n        i++;\r\n        k++;\r\n    }\r\n\r\n    // writing the remaining elements if the two arrays have different size\r\n    while (k <= r && j < B.length) {\r\n        array[k] = B[j];\r\n\r\n        animatedElements = [{index: k, type: TYPE.P_SORTED}];\r\n        animations = newAnimationsArray(animatedElements, array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n\r\n        j++;\r\n        k++;\r\n    }\r\n}","import { swap, newFrame, newAnimationsArray } from '../utils';\r\n\r\nconst TYPE = {\r\n    CHECKED: 'brown',\r\n    TARGET: 'brown',\r\n    SELECTED: 'darkyellow',\r\n    AVG: 'brown',\r\n    FINAL: 'rgba(28, 129, 21, 0.678)',\r\n    PIVOT: '#006699'\r\n};\r\n\r\nexport function quickSort(array) {\r\n    let history = [];\r\n    let finals = [];\r\n\r\n    if (Array.isArray(array))\r\n        quickSort_recursive(array, 0, array.length-1, history, finals);\r\n    \r\n    return history;\r\n}\r\n\r\nfunction quickSort_recursive(array, left, right, history, finals) {\r\n    if ( left < right ) {\r\n        randomizePivot(array, left, right, history, finals);\r\n\r\n        let indeces = partition(array, left, right, history, finals);\r\n        let m1 = indeces.m1;\r\n        let m2 = indeces.m2;\r\n\r\n        quickSort_recursive(array, left, m1, history, finals);\r\n        quickSort_recursive(array, m2, right, history, finals);\r\n    } else if (left === right){ // array already sorted, add new elements in their final position\r\n        let newFinal = {\r\n            index: left,\r\n            type: TYPE.FINAL\r\n        };\r\n        finals.push(newFinal);\r\n        let animations = newAnimationsArray([],array.length, finals);\r\n        history.push(newFrame(array,animations));    \r\n    }\r\n}\r\n\r\nfunction partition(array, left, right, history, finals) {\r\n    let pivot = array[right];\r\n\r\n    // show the pivot\r\n    let animations = newAnimationsArray([{index: right, type: TYPE.PIVOT}], array.length, finals);\r\n    history.push(newFrame(array, animations));\r\n\r\n    let i = left;\r\n    let k = right;\r\n    let j = left;\r\n\r\n    while (j <= k) {\r\n        // show the current element that is being compared to the pivot\r\n        animations = newAnimationsArray([{index: j, type: TYPE.CHECKED}], array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n\r\n        if (array[j] < pivot){\r\n            swap(array, i, j);\r\n            i++;\r\n            j++;\r\n        } else if (array[j] > pivot) {\r\n            swap(array, j, k);\r\n            k--;\r\n        } else {\r\n            j++;\r\n        }\r\n\r\n        // show the new array state after comparing the element in index j with the pivot\r\n        animations = newAnimationsArray([],array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n    }\r\n\r\n    // update the list of the elements in their final positions (i.e. the pivot and all the element equal to the pivot)\r\n    for (let index=i; index <= k; index++){\r\n        let newFinal = {\r\n            index: index,\r\n            type: TYPE.FINAL\r\n        };\r\n        finals.push(newFinal);\r\n    }\r\n\r\n    // show the new array state (with the new elements in their final position)\r\n    animations = newAnimationsArray([],array.length, finals);\r\n    history.push(newFrame(array,animations));    \r\n\r\n    let indeces = {\r\n        m1: i-1,\r\n        m2: k+1\r\n    };\r\n\r\n    return indeces;\r\n}\r\n\r\nfunction randomizePivot(array, left, right, history, finals) {\r\n    let mid = Math.floor((left + right) / 2);\r\n\r\n    let first = array[left];\r\n    let median = array[mid];\r\n    let last = array[right];\r\n\r\n    let swapping_index = mid;\r\n\r\n    if ((first > median && first < last) || (first < median && first > last))\r\n        swapping_index = left;\r\n    else if ((last < median && last > first) || (last > median && last < first))\r\n        swapping_index = right;\r\n    else if ((median < first && median > last) || (median > first && median < last))\r\n        swapping_index = mid;\r\n    else if (median === first)\r\n        swapping_index = right;\r\n    else if (median === last)\r\n        swapping_index = left;\r\n\r\n    let animatedElements = [{index: left, type: TYPE.CHECKED}, {index: mid, type: TYPE.CHECKED}, {index: right, type: TYPE.CHECKED}];\r\n    let animations = newAnimationsArray(animatedElements, array.length, finals);\r\n    history.push(newFrame(array, animations));\r\n    \r\n    swap(array, swapping_index, right);\r\n    history.push(newFrame(array, newAnimationsArray([{index: right, type: TYPE.AVG}], array.length, finals)));\r\n}\r\n","import { swap, newFrame, newAnimationsArray } from '../utils';\r\n\r\nconst TYPE = {\r\n    CHECKED: 'brown',\r\n    TARGET: 'brown',\r\n    SELECTED: 'darkyellow',\r\n    MIN: '#006699', //blueish\r\n    FINAL: 'rgba(28, 129, 21, 0.678)',\r\n};\r\n\r\n\r\nfunction selectionSort(array) {\r\n    let history = [];\r\n    let animations;\r\n    let finals = [];\r\n\r\n    for (let i=0; i < array.length; i++){\r\n        let minIndex = i;\r\n\r\n        for (let j=i; j < array.length; j++){\r\n            animations = newAnimationsArray([{index: minIndex, type: TYPE.MIN}, {index: j, type: TYPE.TARGET}], array.length, finals);\r\n            history.push(newFrame(array,animations));\r\n\r\n            if (array[j] < array[minIndex]){\r\n                minIndex = j;\r\n            } \r\n\r\n            animations = newAnimationsArray([{index: minIndex, type: TYPE.MIN}], array.length, finals);\r\n            history.push(newFrame(array, animations));\r\n        }\r\n        \r\n        swap(array, i, minIndex);\r\n        \r\n        let newFinal = {\r\n            index: i,\r\n            type: TYPE.FINAL\r\n        };\r\n\r\n        finals.push(newFinal);\r\n        animations = newAnimationsArray([{index: i, type: TYPE.FINAL}], array.length, finals);\r\n        history.push(newFrame(array, animations));\r\n    }\r\n\r\n    return history;\r\n}\r\n\r\n\r\nexport { selectionSort };","import React                from \"react\";\r\nimport { heapSort }         from \"../sorting-algorithms/heapSort\";\r\nimport { getRandomInteger, deepCopyArray, sleep, colorNodes, colorBars } from \"../utils\";\r\nimport { mergeSort }        from \"../sorting-algorithms/mergeSort\";\r\nimport { quickSort }        from \"../sorting-algorithms/quickSort\";\r\nimport { selectionSort }    from \"../sorting-algorithms/selectionSort\";\r\n\r\nconst SPEED_CONSTANT = 1000;     // lower means faster animations\r\nconst MAX_ARRAY_SIZE = 200;\r\nconst MIN_ARRAY_SIZE = 5;\r\nconst SIZE_INCREMENT = 15;\r\n\r\nconst colors = {\r\n    SORTED_COLOR: 'rgba(28, 129, 21, 0.678)',\r\n    DEFAULT_UNSORTED: 'rgba(185, 127, 80, 0.568)',\r\n    ACTIVE_COLOR: 'rgb(179, 86, 11)',\r\n    MIN_INDEX_COLOR: 'rgb(235, 204, 9, 0.82)'\r\n};\r\n\r\nconst algorithms = {\r\n    mergesort: mergeSort,\r\n    heapsort: heapSort,\r\n    quicksort: quickSort,\r\n    selectionsort: selectionSort\r\n};\r\n\r\n\r\nclass Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            arraySize: 30,\r\n            usedSortingAlgorithm: null\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.resetArray();\r\n    }\r\n\r\n    // create a new random array\r\n    resetArray = (callback) => {\r\n        let newArraySize = this.state.arraySize;\r\n        let newArray = [];\r\n        for (let i=0; i < newArraySize; i++) {\r\n            let value = getRandomInteger(5, 200);\r\n            newArray.push(value);\r\n        }\r\n\r\n        if (callback)\r\n            this.setState({array: newArray, arraySize: newArray.length, usedSortingAlgorithm: null}, callback);\r\n        else this.setState({array: newArray, arraySize: newArray.length, usedSortingAlgorithm: null});\r\n    }\r\n\r\n    setDisableProperty = (selector) => {\r\n        let nodes = document.querySelectorAll(selector);\r\n        for (const node of nodes) \r\n            node.setAttribute('disabled', true);\r\n    }\r\n\r\n    // sort the current array (stored in the state) by using the algorithm passed by parameter\r\n    sort = (algorithm) => {\r\n        this.setState({usedSortingAlgorithm: null}, () => this.setDisableProperty('.sort-button, .reset-button, .size-button'));\r\n\r\n        algorithm = algorithm.trim().toLowerCase();\r\n\r\n        let array = deepCopyArray(this.state.array);\r\n\r\n        if (algorithm in algorithms){\r\n            let history = algorithms[algorithm](array);\r\n            this.showSorting(history, algorithm);\r\n        } else alert(`The selected algorithm '${algorithm}' does not exists.`);\r\n    }\r\n\r\n    // show sorting animations\r\n    showSorting = async (history, algorithm) => {\r\n        for (const frame of history){\r\n            await sleep(SPEED_CONSTANT/this.state.arraySize);\r\n            this.setState({array: frame.values}, () => {colorBars(frame.animations); this.setDisableProperty('button');});\r\n        }    \r\n\r\n        // array sorted shown\r\n        this.setState({usedSortingAlgorithm: algorithm}, () => colorNodes('.array-bar', colors.SORTED_COLOR));\r\n    }\r\n\r\n    handleSizeChange = (event) => {\r\n        let currentArraySize = this.state.arraySize;\r\n        let newArraySize;\r\n\r\n        // Compute new size\r\n        if (event.target.name === 'minus-button')\r\n            newArraySize = Math.max(MIN_ARRAY_SIZE, currentArraySize - SIZE_INCREMENT);\r\n        else if (event.target.name === 'plus-button')\r\n            newArraySize = Math.min(MAX_ARRAY_SIZE, currentArraySize + SIZE_INCREMENT);\r\n\r\n        if (newArraySize === MAX_ARRAY_SIZE){\r\n            this.setState({arraySize: newArraySize}, () => {\r\n                this.resetArray(() => this.setDisableProperty('button.plus-size-button'));\r\n            });\r\n            \r\n        } else if (newArraySize === MIN_ARRAY_SIZE){\r\n            this.setState({arraySize: newArraySize}, () => {\r\n                this.resetArray(() => this.setDisableProperty('button.minus-size-button'));\r\n            });\r\n            \r\n        } else this.setState({arraySize: newArraySize}, () => this.resetArray());\r\n\r\n    }\r\n\r\n    render = () => {\r\n        let Header = () => {\r\n            return (<>\r\n                <h1 id='headline'> Sorting Visualizer </h1>\r\n\r\n                <div id='wrapper'>\r\n                <div id='sort-buttons-container'>\r\n                <button className='custom-button sort-button'    onClick={() => this.sort('selectionsort')}> SelectionSort </button>\r\n                <button className='custom-button sort-button'    onClick={() => this.sort('quicksort')}> QuickSort </button>\r\n                <button className='custom-button sort-button'    onClick={() => this.sort('mergesort')}> MergeSort </button>\r\n                <button className='custom-button sort-button'    onClick={() => this.sort('heapsort')}> HeapSort </button>\r\n                </div>\r\n\r\n                <div id='array-changer-container'>\r\n                <div id='size-changer-container'>              \r\n                <button className='custom-button size-button minus-size-button' name='minus-button' onClick={this.handleSizeChange}> - </button>\r\n                <label htmlFor=\"array-size\" id=\"array-size\">Array size</label>\r\n                <button className='custom-button size-button plus-size-button' name='plus-button' onClick={this.handleSizeChange}> + </button>\r\n                </div>\r\n                <button className='custom-button reset-button'   onClick={() => this.resetArray()}> Generate New Array </button>\r\n                </div>\r\n                </div>\r\n                </>\r\n            );\r\n        }\r\n\r\n        let VisualizerContainer = () => {\r\n            let arrayBars = this.state.array.map((value, index) => {\r\n                return (\r\n                    <div className='array-bar' id={`array-bar-${index}`} key={index}\r\n                    style={{height:`${value*2}px`}}\r\n                    ></div>\r\n                );\r\n            });\r\n\r\n            let sortingInfo = (this.state.usedSortingAlgorithm != null ) ? `Array sorted by ${this.state.usedSortingAlgorithm} algorithm!` : '';\r\n\r\n            return (\r\n                <>\r\n                <div id='sorting-info'> {sortingInfo} </div>\r\n                <div id='visualizer-container'>\r\n                {arrayBars}\r\n                </div>\r\n                </>\r\n            );\r\n        }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Header/>\r\n            <VisualizerContainer/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Visualizer;","import './App.css';\nimport Visualizer from './Components/Visualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}